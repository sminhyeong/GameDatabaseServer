// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USEREVENT_H_
#define FLATBUFFERS_GENERATED_USEREVENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct S2C_Login;
struct S2C_LoginBuilder;

struct C2S_Login;
struct C2S_LoginBuilder;

struct S2C_Logout;
struct S2C_LogoutBuilder;

struct C2S_Logout;
struct C2S_LogoutBuilder;

struct S2C_CreateAccount;
struct S2C_CreateAccountBuilder;

struct C2S_CreateAccount;
struct C2S_CreateAccountBuilder;

struct ItemData;
struct ItemDataBuilder;

struct S2C_ItemData;
struct S2C_ItemDataBuilder;

struct C2S_ItemData;
struct C2S_ItemDataBuilder;

struct S2C_PlayerData;
struct S2C_PlayerDataBuilder;

struct C2S_PlayerData;
struct C2S_PlayerDataBuilder;

struct MonsterData;
struct MonsterDataBuilder;

struct S2C_MonsterData;
struct S2C_MonsterDataBuilder;

struct C2S_MonsterData;
struct C2S_MonsterDataBuilder;

struct ChatData;
struct ChatDataBuilder;

struct S2C_PlayerChat;
struct S2C_PlayerChatBuilder;

struct C2S_PlayerChat;
struct C2S_PlayerChatBuilder;

struct DatabasePacket;
struct DatabasePacketBuilder;

enum ResultCode : int8_t {
  ResultCode_SUCCESS = 0,
  ResultCode_FAIL = 1,
  ResultCode_INVALID_USER = 2,
  ResultCode_USER_NOT_FOUND = 3,
  ResultCode_MIN = ResultCode_SUCCESS,
  ResultCode_MAX = ResultCode_USER_NOT_FOUND
};

inline const ResultCode (&EnumValuesResultCode())[4] {
  static const ResultCode values[] = {
    ResultCode_SUCCESS,
    ResultCode_FAIL,
    ResultCode_INVALID_USER,
    ResultCode_USER_NOT_FOUND
  };
  return values;
}

inline const char * const *EnumNamesResultCode() {
  static const char * const names[5] = {
    "SUCCESS",
    "FAIL",
    "INVALID_USER",
    "USER_NOT_FOUND",
    nullptr
  };
  return names;
}

inline const char *EnumNameResultCode(ResultCode e) {
  if (::flatbuffers::IsOutRange(e, ResultCode_SUCCESS, ResultCode_USER_NOT_FOUND)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResultCode()[index];
}

enum EventType : uint8_t {
  EventType_NONE = 0,
  EventType_S2C_Login = 1,
  EventType_C2S_Login = 2,
  EventType_S2C_Logout = 3,
  EventType_C2S_Logout = 4,
  EventType_S2C_CreateAccount = 5,
  EventType_C2S_CreateAccount = 6,
  EventType_S2C_ItemData = 7,
  EventType_C2S_ItemData = 8,
  EventType_S2C_PlayerData = 9,
  EventType_C2S_PlayerData = 10,
  EventType_S2C_MonsterData = 11,
  EventType_C2S_MonsterData = 12,
  EventType_S2C_PlayerChat = 13,
  EventType_C2S_PlayerChat = 14,
  EventType_MIN = EventType_NONE,
  EventType_MAX = EventType_C2S_PlayerChat
};

inline const EventType (&EnumValuesEventType())[15] {
  static const EventType values[] = {
    EventType_NONE,
    EventType_S2C_Login,
    EventType_C2S_Login,
    EventType_S2C_Logout,
    EventType_C2S_Logout,
    EventType_S2C_CreateAccount,
    EventType_C2S_CreateAccount,
    EventType_S2C_ItemData,
    EventType_C2S_ItemData,
    EventType_S2C_PlayerData,
    EventType_C2S_PlayerData,
    EventType_S2C_MonsterData,
    EventType_C2S_MonsterData,
    EventType_S2C_PlayerChat,
    EventType_C2S_PlayerChat
  };
  return values;
}

inline const char * const *EnumNamesEventType() {
  static const char * const names[16] = {
    "NONE",
    "S2C_Login",
    "C2S_Login",
    "S2C_Logout",
    "C2S_Logout",
    "S2C_CreateAccount",
    "C2S_CreateAccount",
    "S2C_ItemData",
    "C2S_ItemData",
    "S2C_PlayerData",
    "C2S_PlayerData",
    "S2C_MonsterData",
    "C2S_MonsterData",
    "S2C_PlayerChat",
    "C2S_PlayerChat",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventType(EventType e) {
  if (::flatbuffers::IsOutRange(e, EventType_NONE, EventType_C2S_PlayerChat)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventType()[index];
}

template<typename T> struct EventTypeTraits {
  static const EventType enum_value = EventType_NONE;
};

template<> struct EventTypeTraits<S2C_Login> {
  static const EventType enum_value = EventType_S2C_Login;
};

template<> struct EventTypeTraits<C2S_Login> {
  static const EventType enum_value = EventType_C2S_Login;
};

template<> struct EventTypeTraits<S2C_Logout> {
  static const EventType enum_value = EventType_S2C_Logout;
};

template<> struct EventTypeTraits<C2S_Logout> {
  static const EventType enum_value = EventType_C2S_Logout;
};

template<> struct EventTypeTraits<S2C_CreateAccount> {
  static const EventType enum_value = EventType_S2C_CreateAccount;
};

template<> struct EventTypeTraits<C2S_CreateAccount> {
  static const EventType enum_value = EventType_C2S_CreateAccount;
};

template<> struct EventTypeTraits<S2C_ItemData> {
  static const EventType enum_value = EventType_S2C_ItemData;
};

template<> struct EventTypeTraits<C2S_ItemData> {
  static const EventType enum_value = EventType_C2S_ItemData;
};

template<> struct EventTypeTraits<S2C_PlayerData> {
  static const EventType enum_value = EventType_S2C_PlayerData;
};

template<> struct EventTypeTraits<C2S_PlayerData> {
  static const EventType enum_value = EventType_C2S_PlayerData;
};

template<> struct EventTypeTraits<S2C_MonsterData> {
  static const EventType enum_value = EventType_S2C_MonsterData;
};

template<> struct EventTypeTraits<C2S_MonsterData> {
  static const EventType enum_value = EventType_C2S_MonsterData;
};

template<> struct EventTypeTraits<S2C_PlayerChat> {
  static const EventType enum_value = EventType_S2C_PlayerChat;
};

template<> struct EventTypeTraits<C2S_PlayerChat> {
  static const EventType enum_value = EventType_C2S_PlayerChat;
};

bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type);
bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct S2C_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_USERNAME = 8,
    VT_LEVEL = 10
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           verifier.EndTable();
  }
};

struct S2C_LoginBuilder {
  typedef S2C_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_Login::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_Login::VT_USER_ID, user_id, 0);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(S2C_Login::VT_USERNAME, username);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(S2C_Login::VT_LEVEL, level, 0);
  }
  explicit S2C_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    uint32_t level = 0) {
  S2C_LoginBuilder builder_(_fbb);
  builder_.add_level(level);
  builder_.add_username(username);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Login> CreateS2C_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *username = nullptr,
    uint32_t level = 0) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  return CreateS2C_Login(
      _fbb,
      result,
      user_id,
      username__,
      level);
}

struct C2S_Login FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LoginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           verifier.EndTable();
  }
};

struct C2S_LoginBuilder {
  typedef C2S_Login Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(C2S_Login::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_Login::VT_PASSWORD, password);
  }
  explicit C2S_LoginBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Login>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_Login(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0) {
  C2S_LoginBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_Login> CreateC2S_LoginDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  return CreateC2S_Login(
      _fbb,
      username__,
      password__);
}

struct S2C_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MESSAGE = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_LogoutBuilder {
  typedef S2C_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_Logout::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_Logout::VT_MESSAGE, message);
  }
  explicit S2C_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_Logout> CreateS2C_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_LogoutBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_Logout> CreateS2C_LogoutDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_Logout(
      _fbb,
      result,
      message__);
}

struct C2S_Logout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_LogoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           verifier.EndTable();
  }
};

struct C2S_LogoutBuilder {
  typedef C2S_Logout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_Logout::VT_USER_ID, user_id, 0);
  }
  explicit C2S_LogoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_Logout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_Logout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_Logout> CreateC2S_Logout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0) {
  C2S_LogoutBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_CreateAccount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_CreateAccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_MESSAGE = 8
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct S2C_CreateAccountBuilder {
  typedef S2C_CreateAccount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_CreateAccount::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_CreateAccount::VT_USER_ID, user_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(S2C_CreateAccount::VT_MESSAGE, message);
  }
  explicit S2C_CreateAccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_CreateAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_CreateAccount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_CreateAccount> CreateS2C_CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  S2C_CreateAccountBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_CreateAccount> CreateS2C_CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateS2C_CreateAccount(
      _fbb,
      result,
      user_id,
      message__);
}

struct C2S_CreateAccount FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_CreateAccountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_PASSWORD = 6,
    VT_NICKNAME = 8
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *password() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSWORD);
  }
  const ::flatbuffers::String *nickname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NICKNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffset(verifier, VT_NICKNAME) &&
           verifier.VerifyString(nickname()) &&
           verifier.EndTable();
  }
};

struct C2S_CreateAccountBuilder {
  typedef C2S_CreateAccount Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(C2S_CreateAccount::VT_USERNAME, username);
  }
  void add_password(::flatbuffers::Offset<::flatbuffers::String> password) {
    fbb_.AddOffset(C2S_CreateAccount::VT_PASSWORD, password);
  }
  void add_nickname(::flatbuffers::Offset<::flatbuffers::String> nickname) {
    fbb_.AddOffset(C2S_CreateAccount::VT_NICKNAME, nickname);
  }
  explicit C2S_CreateAccountBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_CreateAccount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_CreateAccount>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_CreateAccount> CreateC2S_CreateAccount(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> password = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nickname = 0) {
  C2S_CreateAccountBuilder builder_(_fbb);
  builder_.add_nickname(nickname);
  builder_.add_password(password);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_CreateAccount> CreateC2S_CreateAccountDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *password = nullptr,
    const char *nickname = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto nickname__ = nickname ? _fbb.CreateString(nickname) : 0;
  return CreateC2S_CreateAccount(
      _fbb,
      username__,
      password__,
      nickname__);
}

struct ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM_ID = 4,
    VT_ITEM_NAME = 6,
    VT_ITEM_COUNT = 8,
    VT_ITEM_TYPE = 10
  };
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  const ::flatbuffers::String *item_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ITEM_NAME);
  }
  uint32_t item_count() const {
    return GetField<uint32_t>(VT_ITEM_COUNT, 0);
  }
  uint32_t item_type() const {
    return GetField<uint32_t>(VT_ITEM_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyOffset(verifier, VT_ITEM_NAME) &&
           verifier.VerifyString(item_name()) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_COUNT, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct ItemDataBuilder {
  typedef ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_ID, item_id, 0);
  }
  void add_item_name(::flatbuffers::Offset<::flatbuffers::String> item_name) {
    fbb_.AddOffset(ItemData::VT_ITEM_NAME, item_name);
  }
  void add_item_count(uint32_t item_count) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_COUNT, item_count, 0);
  }
  void add_item_type(uint32_t item_type) {
    fbb_.AddElement<uint32_t>(ItemData::VT_ITEM_TYPE, item_type, 0);
  }
  explicit ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemData> CreateItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t item_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> item_name = 0,
    uint32_t item_count = 0,
    uint32_t item_type = 0) {
  ItemDataBuilder builder_(_fbb);
  builder_.add_item_type(item_type);
  builder_.add_item_count(item_count);
  builder_.add_item_name(item_name);
  builder_.add_item_id(item_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemData> CreateItemDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t item_id = 0,
    const char *item_name = nullptr,
    uint32_t item_count = 0,
    uint32_t item_type = 0) {
  auto item_name__ = item_name ? _fbb.CreateString(item_name) : 0;
  return CreateItemData(
      _fbb,
      item_id,
      item_name__,
      item_count,
      item_type);
}

struct S2C_ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_ITEMS = 8,
    VT_GOLD = 10
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *items() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ItemData>> *>(VT_ITEMS);
  }
  uint32_t gold() const {
    return GetField<uint32_t>(VT_GOLD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_ITEMS) &&
           verifier.VerifyVector(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           VerifyField<uint32_t>(verifier, VT_GOLD, 4) &&
           verifier.EndTable();
  }
};

struct S2C_ItemDataBuilder {
  typedef S2C_ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_ItemData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_ItemData::VT_USER_ID, user_id, 0);
  }
  void add_items(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items) {
    fbb_.AddOffset(S2C_ItemData::VT_ITEMS, items);
  }
  void add_gold(uint32_t gold) {
    fbb_.AddElement<uint32_t>(S2C_ItemData::VT_GOLD, gold, 0);
  }
  explicit S2C_ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ItemData> CreateS2C_ItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ItemData>>> items = 0,
    uint32_t gold = 0) {
  S2C_ItemDataBuilder builder_(_fbb);
  builder_.add_gold(gold);
  builder_.add_items(items);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_ItemData> CreateS2C_ItemDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const std::vector<::flatbuffers::Offset<ItemData>> *items = nullptr,
    uint32_t gold = 0) {
  auto items__ = items ? _fbb.CreateVector<::flatbuffers::Offset<ItemData>>(*items) : 0;
  return CreateS2C_ItemData(
      _fbb,
      result,
      user_id,
      items__,
      gold);
}

struct C2S_ItemData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_ItemDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_REQUEST_TYPE = 6,
    VT_ITEM_ID = 8,
    VT_ITEM_COUNT = 10
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  uint32_t item_count() const {
    return GetField<uint32_t>(VT_ITEM_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct C2S_ItemDataBuilder {
  typedef C2S_ItemData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_USER_ID, user_id, 0);
  }
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_ITEM_ID, item_id, 0);
  }
  void add_item_count(uint32_t item_count) {
    fbb_.AddElement<uint32_t>(C2S_ItemData::VT_ITEM_COUNT, item_count, 0);
  }
  explicit C2S_ItemDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_ItemData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_ItemData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_ItemData> CreateC2S_ItemData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t request_type = 0,
    uint32_t item_id = 0,
    uint32_t item_count = 0) {
  C2S_ItemDataBuilder builder_(_fbb);
  builder_.add_item_count(item_count);
  builder_.add_item_id(item_id);
  builder_.add_request_type(request_type);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct S2C_PlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_PlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_USER_ID = 6,
    VT_USERNAME = 8,
    VT_LEVEL = 10,
    VT_EXP = 12,
    VT_HP = 14,
    VT_MP = 16,
    VT_ATTACK = 18,
    VT_DEFENSE = 20,
    VT_GOLD = 22,
    VT_MAP_ID = 24,
    VT_POS_X = 26,
    VT_POS_Y = 28
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t exp() const {
    return GetField<uint32_t>(VT_EXP, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  uint32_t attack() const {
    return GetField<uint32_t>(VT_ATTACK, 0);
  }
  uint32_t defense() const {
    return GetField<uint32_t>(VT_DEFENSE, 0);
  }
  uint32_t gold() const {
    return GetField<uint32_t>(VT_GOLD, 0);
  }
  uint32_t map_id() const {
    return GetField<uint32_t>(VT_MAP_ID, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ATTACK, 4) &&
           VerifyField<uint32_t>(verifier, VT_DEFENSE, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOLD, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAP_ID, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct S2C_PlayerDataBuilder {
  typedef S2C_PlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_PlayerData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_USER_ID, user_id, 0);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(S2C_PlayerData::VT_USERNAME, username);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_LEVEL, level, 0);
  }
  void add_exp(uint32_t exp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_EXP, exp, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_HP, hp, 0);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_MP, mp, 0);
  }
  void add_attack(uint32_t attack) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_ATTACK, attack, 0);
  }
  void add_defense(uint32_t defense) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_DEFENSE, defense, 0);
  }
  void add_gold(uint32_t gold) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_GOLD, gold, 0);
  }
  void add_map_id(uint32_t map_id) {
    fbb_.AddElement<uint32_t>(S2C_PlayerData::VT_MAP_ID, map_id, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(S2C_PlayerData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(S2C_PlayerData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit S2C_PlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_PlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_PlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_PlayerData> CreateS2C_PlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t gold = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  S2C_PlayerDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_map_id(map_id);
  builder_.add_gold(gold);
  builder_.add_defense(defense);
  builder_.add_attack(attack);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_exp(exp);
  builder_.add_level(level);
  builder_.add_username(username);
  builder_.add_user_id(user_id);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_PlayerData> CreateS2C_PlayerDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    uint32_t user_id = 0,
    const char *username = nullptr,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t gold = 0,
    uint32_t map_id = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  return CreateS2C_PlayerData(
      _fbb,
      result,
      user_id,
      username__,
      level,
      exp,
      hp,
      mp,
      attack,
      defense,
      gold,
      map_id,
      pos_x,
      pos_y);
}

struct C2S_PlayerData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_PlayerDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_REQUEST_TYPE = 6,
    VT_LEVEL = 8,
    VT_EXP = 10,
    VT_HP = 12,
    VT_MP = 14,
    VT_POS_X = 16,
    VT_POS_Y = 18
  };
  uint32_t user_id() const {
    return GetField<uint32_t>(VT_USER_ID, 0);
  }
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t exp() const {
    return GetField<uint32_t>(VT_EXP, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  float pos_x() const {
    return GetField<float>(VT_POS_X, 0.0f);
  }
  float pos_y() const {
    return GetField<float>(VT_POS_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_USER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_MP, 4) &&
           VerifyField<float>(verifier, VT_POS_X, 4) &&
           VerifyField<float>(verifier, VT_POS_Y, 4) &&
           verifier.EndTable();
  }
};

struct C2S_PlayerDataBuilder {
  typedef C2S_PlayerData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_USER_ID, user_id, 0);
  }
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_LEVEL, level, 0);
  }
  void add_exp(uint32_t exp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_EXP, exp, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_HP, hp, 0);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(C2S_PlayerData::VT_MP, mp, 0);
  }
  void add_pos_x(float pos_x) {
    fbb_.AddElement<float>(C2S_PlayerData::VT_POS_X, pos_x, 0.0f);
  }
  void add_pos_y(float pos_y) {
    fbb_.AddElement<float>(C2S_PlayerData::VT_POS_Y, pos_y, 0.0f);
  }
  explicit C2S_PlayerDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_PlayerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_PlayerData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_PlayerData> CreateC2S_PlayerData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t user_id = 0,
    uint32_t request_type = 0,
    uint32_t level = 0,
    uint32_t exp = 0,
    uint32_t hp = 0,
    uint32_t mp = 0,
    float pos_x = 0.0f,
    float pos_y = 0.0f) {
  C2S_PlayerDataBuilder builder_(_fbb);
  builder_.add_pos_y(pos_y);
  builder_.add_pos_x(pos_x);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_exp(exp);
  builder_.add_level(level);
  builder_.add_request_type(request_type);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

struct MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_MONSTER_NAME = 6,
    VT_LEVEL = 8,
    VT_HP = 10,
    VT_ATTACK = 12,
    VT_DEFENSE = 14,
    VT_EXP_REWARD = 16,
    VT_GOLD_REWARD = 18
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const ::flatbuffers::String *monster_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MONSTER_NAME);
  }
  uint32_t level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t attack() const {
    return GetField<uint32_t>(VT_ATTACK, 0);
  }
  uint32_t defense() const {
    return GetField<uint32_t>(VT_DEFENSE, 0);
  }
  uint32_t exp_reward() const {
    return GetField<uint32_t>(VT_EXP_REWARD, 0);
  }
  uint32_t gold_reward() const {
    return GetField<uint32_t>(VT_GOLD_REWARD, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_MONSTER_NAME) &&
           verifier.VerifyString(monster_name()) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL, 4) &&
           VerifyField<uint32_t>(verifier, VT_HP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ATTACK, 4) &&
           VerifyField<uint32_t>(verifier, VT_DEFENSE, 4) &&
           VerifyField<uint32_t>(verifier, VT_EXP_REWARD, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOLD_REWARD, 4) &&
           verifier.EndTable();
  }
};

struct MonsterDataBuilder {
  typedef MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_MONSTER_ID, monster_id, 0);
  }
  void add_monster_name(::flatbuffers::Offset<::flatbuffers::String> monster_name) {
    fbb_.AddOffset(MonsterData::VT_MONSTER_NAME, monster_name);
  }
  void add_level(uint32_t level) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_LEVEL, level, 0);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_HP, hp, 0);
  }
  void add_attack(uint32_t attack) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_ATTACK, attack, 0);
  }
  void add_defense(uint32_t defense) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_DEFENSE, defense, 0);
  }
  void add_exp_reward(uint32_t exp_reward) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_EXP_REWARD, exp_reward, 0);
  }
  void add_gold_reward(uint32_t gold_reward) {
    fbb_.AddElement<uint32_t>(MonsterData::VT_GOLD_REWARD, gold_reward, 0);
  }
  explicit MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MonsterData> CreateMonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> monster_name = 0,
    uint32_t level = 0,
    uint32_t hp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t exp_reward = 0,
    uint32_t gold_reward = 0) {
  MonsterDataBuilder builder_(_fbb);
  builder_.add_gold_reward(gold_reward);
  builder_.add_exp_reward(exp_reward);
  builder_.add_defense(defense);
  builder_.add_attack(attack);
  builder_.add_hp(hp);
  builder_.add_level(level);
  builder_.add_monster_name(monster_name);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MonsterData> CreateMonsterDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    const char *monster_name = nullptr,
    uint32_t level = 0,
    uint32_t hp = 0,
    uint32_t attack = 0,
    uint32_t defense = 0,
    uint32_t exp_reward = 0,
    uint32_t gold_reward = 0) {
  auto monster_name__ = monster_name ? _fbb.CreateString(monster_name) : 0;
  return CreateMonsterData(
      _fbb,
      monster_id,
      monster_name__,
      level,
      hp,
      attack,
      defense,
      exp_reward,
      gold_reward);
}

struct S2C_MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_MONSTERS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>> *monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>> *>(VT_MONSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_MONSTERS) &&
           verifier.VerifyVector(monsters()) &&
           verifier.VerifyVectorOfTables(monsters()) &&
           verifier.EndTable();
  }
};

struct S2C_MonsterDataBuilder {
  typedef S2C_MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_MonsterData::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>>> monsters) {
    fbb_.AddOffset(S2C_MonsterData::VT_MONSTERS, monsters);
  }
  explicit S2C_MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_MonsterData> CreateS2C_MonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<MonsterData>>> monsters = 0) {
  S2C_MonsterDataBuilder builder_(_fbb);
  builder_.add_monsters(monsters);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_MonsterData> CreateS2C_MonsterDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<MonsterData>> *monsters = nullptr) {
  auto monsters__ = monsters ? _fbb.CreateVector<::flatbuffers::Offset<MonsterData>>(*monsters) : 0;
  return CreateS2C_MonsterData(
      _fbb,
      result,
      monsters__);
}

struct C2S_MonsterData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_MonsterDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_MONSTER_ID = 6,
    VT_MONSTER_DATA = 8
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const MonsterData *monster_data() const {
    return GetPointer<const MonsterData *>(VT_MONSTER_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_MONSTER_DATA) &&
           verifier.VerifyTable(monster_data()) &&
           verifier.EndTable();
  }
};

struct C2S_MonsterDataBuilder {
  typedef C2S_MonsterData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_MonsterData::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(C2S_MonsterData::VT_MONSTER_ID, monster_id, 0);
  }
  void add_monster_data(::flatbuffers::Offset<MonsterData> monster_data) {
    fbb_.AddOffset(C2S_MonsterData::VT_MONSTER_DATA, monster_data);
  }
  explicit C2S_MonsterDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_MonsterData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_MonsterData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_MonsterData> CreateC2S_MonsterData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<MonsterData> monster_data = 0) {
  C2S_MonsterDataBuilder builder_(_fbb);
  builder_.add_monster_data(monster_data);
  builder_.add_monster_id(monster_id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct ChatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHAT_ID = 4,
    VT_SENDER_ID = 6,
    VT_SENDER_NAME = 8,
    VT_MESSAGE = 10,
    VT_CHAT_TYPE = 12,
    VT_TIMESTAMP = 14
  };
  uint32_t chat_id() const {
    return GetField<uint32_t>(VT_CHAT_ID, 0);
  }
  uint32_t sender_id() const {
    return GetField<uint32_t>(VT_SENDER_ID, 0);
  }
  const ::flatbuffers::String *sender_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENDER_NAME);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t chat_type() const {
    return GetField<uint32_t>(VT_CHAT_TYPE, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_SENDER_ID, 4) &&
           VerifyOffset(verifier, VT_SENDER_NAME) &&
           verifier.VerifyString(sender_name()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_TYPE, 4) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct ChatDataBuilder {
  typedef ChatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chat_id(uint32_t chat_id) {
    fbb_.AddElement<uint32_t>(ChatData::VT_CHAT_ID, chat_id, 0);
  }
  void add_sender_id(uint32_t sender_id) {
    fbb_.AddElement<uint32_t>(ChatData::VT_SENDER_ID, sender_id, 0);
  }
  void add_sender_name(::flatbuffers::Offset<::flatbuffers::String> sender_name) {
    fbb_.AddOffset(ChatData::VT_SENDER_NAME, sender_name);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(ChatData::VT_MESSAGE, message);
  }
  void add_chat_type(uint32_t chat_type) {
    fbb_.AddElement<uint32_t>(ChatData::VT_CHAT_TYPE, chat_type, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(ChatData::VT_TIMESTAMP, timestamp, 0);
  }
  explicit ChatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ChatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ChatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ChatData> CreateChatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t chat_id = 0,
    uint32_t sender_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sender_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    uint32_t chat_type = 0,
    uint64_t timestamp = 0) {
  ChatDataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_chat_type(chat_type);
  builder_.add_message(message);
  builder_.add_sender_name(sender_name);
  builder_.add_sender_id(sender_id);
  builder_.add_chat_id(chat_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ChatData> CreateChatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t chat_id = 0,
    uint32_t sender_id = 0,
    const char *sender_name = nullptr,
    const char *message = nullptr,
    uint32_t chat_type = 0,
    uint64_t timestamp = 0) {
  auto sender_name__ = sender_name ? _fbb.CreateString(sender_name) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateChatData(
      _fbb,
      chat_id,
      sender_id,
      sender_name__,
      message__,
      chat_type,
      timestamp);
}

struct S2C_PlayerChat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_PlayerChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_CHATS = 6
  };
  ResultCode result() const {
    return static_cast<ResultCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ChatData>> *chats() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ChatData>> *>(VT_CHATS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT, 1) &&
           VerifyOffset(verifier, VT_CHATS) &&
           verifier.VerifyVector(chats()) &&
           verifier.VerifyVectorOfTables(chats()) &&
           verifier.EndTable();
  }
};

struct S2C_PlayerChatBuilder {
  typedef S2C_PlayerChat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result(ResultCode result) {
    fbb_.AddElement<int8_t>(S2C_PlayerChat::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_chats(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ChatData>>> chats) {
    fbb_.AddOffset(S2C_PlayerChat::VT_CHATS, chats);
  }
  explicit S2C_PlayerChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_PlayerChat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_PlayerChat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_PlayerChat> CreateS2C_PlayerChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ChatData>>> chats = 0) {
  S2C_PlayerChatBuilder builder_(_fbb);
  builder_.add_chats(chats);
  builder_.add_result(result);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_PlayerChat> CreateS2C_PlayerChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ResultCode result = ResultCode_SUCCESS,
    const std::vector<::flatbuffers::Offset<ChatData>> *chats = nullptr) {
  auto chats__ = chats ? _fbb.CreateVector<::flatbuffers::Offset<ChatData>>(*chats) : 0;
  return CreateS2C_PlayerChat(
      _fbb,
      result,
      chats__);
}

struct C2S_PlayerChat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_PlayerChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_SENDER_ID = 6,
    VT_RECEIVER_ID = 8,
    VT_MESSAGE = 10,
    VT_CHAT_TYPE = 12
  };
  uint32_t request_type() const {
    return GetField<uint32_t>(VT_REQUEST_TYPE, 0);
  }
  uint32_t sender_id() const {
    return GetField<uint32_t>(VT_SENDER_ID, 0);
  }
  uint32_t receiver_id() const {
    return GetField<uint32_t>(VT_RECEIVER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  uint32_t chat_type() const {
    return GetField<uint32_t>(VT_CHAT_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REQUEST_TYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_SENDER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_RECEIVER_ID, 4) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyField<uint32_t>(verifier, VT_CHAT_TYPE, 4) &&
           verifier.EndTable();
  }
};

struct C2S_PlayerChatBuilder {
  typedef C2S_PlayerChat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(uint32_t request_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_sender_id(uint32_t sender_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_SENDER_ID, sender_id, 0);
  }
  void add_receiver_id(uint32_t receiver_id) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_RECEIVER_ID, receiver_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(C2S_PlayerChat::VT_MESSAGE, message);
  }
  void add_chat_type(uint32_t chat_type) {
    fbb_.AddElement<uint32_t>(C2S_PlayerChat::VT_CHAT_TYPE, chat_type, 0);
  }
  explicit C2S_PlayerChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_PlayerChat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_PlayerChat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_PlayerChat> CreateC2S_PlayerChat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t sender_id = 0,
    uint32_t receiver_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0,
    uint32_t chat_type = 0) {
  C2S_PlayerChatBuilder builder_(_fbb);
  builder_.add_chat_type(chat_type);
  builder_.add_message(message);
  builder_.add_receiver_id(receiver_id);
  builder_.add_sender_id(sender_id);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_PlayerChat> CreateC2S_PlayerChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t request_type = 0,
    uint32_t sender_id = 0,
    uint32_t receiver_id = 0,
    const char *message = nullptr,
    uint32_t chat_type = 0) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateC2S_PlayerChat(
      _fbb,
      request_type,
      sender_id,
      receiver_id,
      message__,
      chat_type);
}

struct DatabasePacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DatabasePacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_EVENT_TYPE = 4,
    VT_PACKET_EVENT = 6,
    VT_CLIENT_SOCKET = 8
  };
  EventType packet_event_type() const {
    return static_cast<EventType>(GetField<uint8_t>(VT_PACKET_EVENT_TYPE, 0));
  }
  const void *packet_event() const {
    return GetPointer<const void *>(VT_PACKET_EVENT);
  }
  template<typename T> const T *packet_event_as() const;
  const S2C_Login *packet_event_as_S2C_Login() const {
    return packet_event_type() == EventType_S2C_Login ? static_cast<const S2C_Login *>(packet_event()) : nullptr;
  }
  const C2S_Login *packet_event_as_C2S_Login() const {
    return packet_event_type() == EventType_C2S_Login ? static_cast<const C2S_Login *>(packet_event()) : nullptr;
  }
  const S2C_Logout *packet_event_as_S2C_Logout() const {
    return packet_event_type() == EventType_S2C_Logout ? static_cast<const S2C_Logout *>(packet_event()) : nullptr;
  }
  const C2S_Logout *packet_event_as_C2S_Logout() const {
    return packet_event_type() == EventType_C2S_Logout ? static_cast<const C2S_Logout *>(packet_event()) : nullptr;
  }
  const S2C_CreateAccount *packet_event_as_S2C_CreateAccount() const {
    return packet_event_type() == EventType_S2C_CreateAccount ? static_cast<const S2C_CreateAccount *>(packet_event()) : nullptr;
  }
  const C2S_CreateAccount *packet_event_as_C2S_CreateAccount() const {
    return packet_event_type() == EventType_C2S_CreateAccount ? static_cast<const C2S_CreateAccount *>(packet_event()) : nullptr;
  }
  const S2C_ItemData *packet_event_as_S2C_ItemData() const {
    return packet_event_type() == EventType_S2C_ItemData ? static_cast<const S2C_ItemData *>(packet_event()) : nullptr;
  }
  const C2S_ItemData *packet_event_as_C2S_ItemData() const {
    return packet_event_type() == EventType_C2S_ItemData ? static_cast<const C2S_ItemData *>(packet_event()) : nullptr;
  }
  const S2C_PlayerData *packet_event_as_S2C_PlayerData() const {
    return packet_event_type() == EventType_S2C_PlayerData ? static_cast<const S2C_PlayerData *>(packet_event()) : nullptr;
  }
  const C2S_PlayerData *packet_event_as_C2S_PlayerData() const {
    return packet_event_type() == EventType_C2S_PlayerData ? static_cast<const C2S_PlayerData *>(packet_event()) : nullptr;
  }
  const S2C_MonsterData *packet_event_as_S2C_MonsterData() const {
    return packet_event_type() == EventType_S2C_MonsterData ? static_cast<const S2C_MonsterData *>(packet_event()) : nullptr;
  }
  const C2S_MonsterData *packet_event_as_C2S_MonsterData() const {
    return packet_event_type() == EventType_C2S_MonsterData ? static_cast<const C2S_MonsterData *>(packet_event()) : nullptr;
  }
  const S2C_PlayerChat *packet_event_as_S2C_PlayerChat() const {
    return packet_event_type() == EventType_S2C_PlayerChat ? static_cast<const S2C_PlayerChat *>(packet_event()) : nullptr;
  }
  const C2S_PlayerChat *packet_event_as_C2S_PlayerChat() const {
    return packet_event_type() == EventType_C2S_PlayerChat ? static_cast<const C2S_PlayerChat *>(packet_event()) : nullptr;
  }
  uint32_t client_socket() const {
    return GetField<uint32_t>(VT_CLIENT_SOCKET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_EVENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_PACKET_EVENT) &&
           VerifyEventType(verifier, packet_event(), packet_event_type()) &&
           VerifyField<uint32_t>(verifier, VT_CLIENT_SOCKET, 4) &&
           verifier.EndTable();
  }
};

template<> inline const S2C_Login *DatabasePacket::packet_event_as<S2C_Login>() const {
  return packet_event_as_S2C_Login();
}

template<> inline const C2S_Login *DatabasePacket::packet_event_as<C2S_Login>() const {
  return packet_event_as_C2S_Login();
}

template<> inline const S2C_Logout *DatabasePacket::packet_event_as<S2C_Logout>() const {
  return packet_event_as_S2C_Logout();
}

template<> inline const C2S_Logout *DatabasePacket::packet_event_as<C2S_Logout>() const {
  return packet_event_as_C2S_Logout();
}

template<> inline const S2C_CreateAccount *DatabasePacket::packet_event_as<S2C_CreateAccount>() const {
  return packet_event_as_S2C_CreateAccount();
}

template<> inline const C2S_CreateAccount *DatabasePacket::packet_event_as<C2S_CreateAccount>() const {
  return packet_event_as_C2S_CreateAccount();
}

template<> inline const S2C_ItemData *DatabasePacket::packet_event_as<S2C_ItemData>() const {
  return packet_event_as_S2C_ItemData();
}

template<> inline const C2S_ItemData *DatabasePacket::packet_event_as<C2S_ItemData>() const {
  return packet_event_as_C2S_ItemData();
}

template<> inline const S2C_PlayerData *DatabasePacket::packet_event_as<S2C_PlayerData>() const {
  return packet_event_as_S2C_PlayerData();
}

template<> inline const C2S_PlayerData *DatabasePacket::packet_event_as<C2S_PlayerData>() const {
  return packet_event_as_C2S_PlayerData();
}

template<> inline const S2C_MonsterData *DatabasePacket::packet_event_as<S2C_MonsterData>() const {
  return packet_event_as_S2C_MonsterData();
}

template<> inline const C2S_MonsterData *DatabasePacket::packet_event_as<C2S_MonsterData>() const {
  return packet_event_as_C2S_MonsterData();
}

template<> inline const S2C_PlayerChat *DatabasePacket::packet_event_as<S2C_PlayerChat>() const {
  return packet_event_as_S2C_PlayerChat();
}

template<> inline const C2S_PlayerChat *DatabasePacket::packet_event_as<C2S_PlayerChat>() const {
  return packet_event_as_C2S_PlayerChat();
}

struct DatabasePacketBuilder {
  typedef DatabasePacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_event_type(EventType packet_event_type) {
    fbb_.AddElement<uint8_t>(DatabasePacket::VT_PACKET_EVENT_TYPE, static_cast<uint8_t>(packet_event_type), 0);
  }
  void add_packet_event(::flatbuffers::Offset<void> packet_event) {
    fbb_.AddOffset(DatabasePacket::VT_PACKET_EVENT, packet_event);
  }
  void add_client_socket(uint32_t client_socket) {
    fbb_.AddElement<uint32_t>(DatabasePacket::VT_CLIENT_SOCKET, client_socket, 0);
  }
  explicit DatabasePacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DatabasePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DatabasePacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DatabasePacket> CreateDatabasePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    EventType packet_event_type = EventType_NONE,
    ::flatbuffers::Offset<void> packet_event = 0,
    uint32_t client_socket = 0) {
  DatabasePacketBuilder builder_(_fbb);
  builder_.add_client_socket(client_socket);
  builder_.add_packet_event(packet_event);
  builder_.add_packet_event_type(packet_event_type);
  return builder_.Finish();
}

inline bool VerifyEventType(::flatbuffers::Verifier &verifier, const void *obj, EventType type) {
  switch (type) {
    case EventType_NONE: {
      return true;
    }
    case EventType_S2C_Login: {
      auto ptr = reinterpret_cast<const S2C_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Login: {
      auto ptr = reinterpret_cast<const C2S_Login *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_Logout: {
      auto ptr = reinterpret_cast<const S2C_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_Logout: {
      auto ptr = reinterpret_cast<const C2S_Logout *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_CreateAccount: {
      auto ptr = reinterpret_cast<const S2C_CreateAccount *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_CreateAccount: {
      auto ptr = reinterpret_cast<const C2S_CreateAccount *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_ItemData: {
      auto ptr = reinterpret_cast<const S2C_ItemData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_ItemData: {
      auto ptr = reinterpret_cast<const C2S_ItemData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_PlayerData: {
      auto ptr = reinterpret_cast<const S2C_PlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_PlayerData: {
      auto ptr = reinterpret_cast<const C2S_PlayerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_MonsterData: {
      auto ptr = reinterpret_cast<const S2C_MonsterData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_MonsterData: {
      auto ptr = reinterpret_cast<const C2S_MonsterData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_S2C_PlayerChat: {
      auto ptr = reinterpret_cast<const S2C_PlayerChat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case EventType_C2S_PlayerChat: {
      auto ptr = reinterpret_cast<const C2S_PlayerChat *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyEventTypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyEventType(
        verifier,  values->Get(i), types->GetEnum<EventType>(i))) {
      return false;
    }
  }
  return true;
}

inline const DatabasePacket *GetDatabasePacket(const void *buf) {
  return ::flatbuffers::GetRoot<DatabasePacket>(buf);
}

inline const DatabasePacket *GetSizePrefixedDatabasePacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DatabasePacket>(buf);
}

inline bool VerifyDatabasePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DatabasePacket>(nullptr);
}

inline bool VerifySizePrefixedDatabasePacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DatabasePacket>(nullptr);
}

inline void FinishDatabasePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DatabasePacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDatabasePacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DatabasePacket> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_USEREVENT_H_

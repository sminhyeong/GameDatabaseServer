enum ResultCode : byte {
    SUCCESS = 0,
    FAIL = 1,
    INVALID_USER = 2,
    USER_NOT_FOUND = 3,
    INSUFFICIENT_GOLD = 4,
    ITEM_NOT_FOUND = 5,
    SHOP_NOT_FOUND = 6
}

// === LOGIN 관련 (수정됨: nickname 추가) ===
table S2C_Login {
    result:ResultCode;
    user_id:uint32;
    username:string;    // 로그인 ID
    nickname:string;    // 캐릭터 닉네임 추가
    level:uint32;
}

table C2S_Login {
    username:string;    // 로그인 ID (문자열)
    password:string;    // 패스워드 (문자열)
}

// === LOGOUT 관련 ===
table S2C_Logout {
    result:ResultCode;
    message:string;
}

table C2S_Logout {
    user_id:uint32;
}

// === 계정 생성 관련 ===
table S2C_CreateAccount {
    result:ResultCode;
    user_id:uint32;
    message:string;
}

table C2S_CreateAccount {
    username:string;    // 로그인 ID (문자열)
    password:string;    // 패스워드 (문자열)
    nickname:string;    // 닉네임 (문자열)
}

// === 아이템 관련 ===
table ItemData {
    item_id:uint32;
    item_name:string;
    item_count:uint32;
    item_type:uint32;     // 0:무기, 1:방어구, 2:소모품
    base_price:uint32;    // 기본 가격
    attack_bonus:uint32;  // 공격력 보너스
    defense_bonus:uint32; // 방어력 보너스
    hp_bonus:uint32;      // HP 보너스
    mp_bonus:uint32;      // MP 보너스
    description:string;   // 아이템 설명
}

table S2C_ItemData {
    result:ResultCode;
    user_id:uint32;
    items:[ItemData];
    gold:uint32;
}

table C2S_ItemData {
    user_id:uint32;
    request_type:uint32;  // 0:조회, 1:추가, 2:삭제, 3:사용
    item_id:uint32;
    item_count:uint32;
}

// === 상점 관련 ===
table ShopData {
    shop_id:uint32;
    shop_name:string;
    shop_type:uint32;     // 0:일반상점, 1:무기점, 2:방어구점, 3:포션점
    map_id:uint32;
    pos_x:float;
    pos_y:float;
}

table S2C_ShopList {
    result:ResultCode;
    shops:[ShopData];
}

table C2S_ShopList {
    request_type:uint32;  // 0:상점목록조회
    map_id:uint32;        // 특정 맵의 상점만 조회 (0이면 전체)
}

table S2C_ShopItems {
    result:ResultCode;
    shop_id:uint32;
    items:[ItemData];     // 해당 상점에서 판매하는 아이템 목록
}

table C2S_ShopItems {
    shop_id:uint32;       // 조회할 상점 ID
}

table S2C_ShopTransaction {
    result:ResultCode;
    message:string;
    updated_gold:uint32;  // 거래 후 플레이어 골드
}

table C2S_ShopTransaction {
    user_id:uint32;
    shop_id:uint32;
    item_id:uint32;
    item_count:uint32;
    transaction_type:uint32; // 0:구매, 1:판매
}

// === 플레이어 관련 ===
table S2C_PlayerData {
    result:ResultCode;
    user_id:uint32;
    username:string;
    nickname:string;    // 닉네임 추가
    level:uint32;
    exp:uint32;
    hp:uint32;
    mp:uint32;
    attack:uint32;
    defense:uint32;
    gold:uint32;
    map_id:uint32;
    pos_x:float;
    pos_y:float;
}

table C2S_PlayerData {
    user_id:uint32;
    request_type:uint32;  // 0:조회, 1:업데이트
    level:uint32;
    exp:uint32;
    hp:uint32;
    mp:uint32;
    pos_x:float;
    pos_y:float;
}

// === 몬스터 관련 ===
table MonsterData {
    monster_id:uint32;
    monster_name:string;
    level:uint32;
    hp:uint32;
    attack:uint32;
    defense:uint32;
    exp_reward:uint32;
    gold_reward:uint32;
}

table S2C_MonsterData {
    result:ResultCode;
    monsters:[MonsterData];
}

table C2S_MonsterData {
    request_type:uint32;  // 0:목록조회, 1:몬스터추가, 2:몬스터삭제
    monster_id:uint32;
    monster_data:MonsterData;
}

// === 채팅 관련 ===
table ChatData {
    chat_id:uint32;
    sender_id:uint32;
    sender_name:string;
    message:string;
    chat_type:uint32;  // 0:전체, 1:귓속말, 2:길드
    timestamp:uint64;
}

table S2C_PlayerChat {
    result:ResultCode;
    chats:[ChatData];
}

table C2S_PlayerChat {
    request_type:uint32;  // 0:채팅목록조회, 1:채팅전송
    sender_id:uint32;
    receiver_id:uint32;
    message:string;
    chat_type:uint32;
}

// === 메인 패킷 구조 ===
union EventType {
    S2C_Login,
    C2S_Login,
    S2C_Logout,
    C2S_Logout,
    S2C_CreateAccount,
    C2S_CreateAccount,
    S2C_ItemData,
    C2S_ItemData,
    S2C_ShopList,        // 상점 목록 조회
    C2S_ShopList,        // 상점 목록 요청
    S2C_ShopItems,       // 상점 아이템 목록
    C2S_ShopItems,       // 상점 아이템 요청
    S2C_ShopTransaction, // 상점 거래 결과
    C2S_ShopTransaction, // 상점 거래 요청
    S2C_PlayerData,
    C2S_PlayerData,
    S2C_MonsterData,
    C2S_MonsterData,
    S2C_PlayerChat,
    C2S_PlayerChat
}

table DatabasePacket {
    packet_event:EventType;
    client_socket:uint32;
}

root_type DatabasePacket;